# .github/actions/run-tests/action.yml
name: "Test Notebooks Action"
description: "Runs tests on a list of notebooks based on the specified environment."

inputs:
  env:
    description: "The environment for running the notebooks (e.g., dev, prod)."
    required: true
  notebooks:
    description: "A comma-separated list of notebooks to be tested."
    required: true

runs:
  using: "composite"
  steps:

    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: "3.11"

    - name: Set environment variables based on input
      run: |
        set -ex
        echo "Running in environment: ${{ inputs.env }}"
        echo "NOTEBOOKS_TO_RUN=${{ inputs.notebooks }}" >> $GITHUB_ENV
        echo "CLASSIQ_TEXT_ONLY=true" >> $GITHUB_ENV

        if [ "${{ inputs.env }}" == "dev" ]; then
          echo "CLASSIQ_IDE=https://nightly.platform.classiq.io" >> $GITHUB_ENV
          echo "CLASSIQ_HOST=https://staging.api.classiq.io" >> $GITHUB_ENV
          echo "IS_DEV=true" >> $GITHUB_ENV
        else
          echo "CLASSIQ_IDE=https://platform.classiq.io" >> $GITHUB_ENV
          echo "CLASSIQ_HOST=https://api.classiq.io" >> $GITHUB_ENV
          echo "IS_DEV=false" >> $GITHUB_ENV
        fi
      shell: bash

    - name: Parse and List Notebooks
      id: parse-notebooks
      run: |
        IFS=',' read -ra notebooks <<< "${{ inputs.notebooks }}"
        for notebook in "${notebooks[@]}"; do
          echo "Notebook to run: $notebook"
        done
      shell: bash

    - name: Set authentication
      run: .github/scripts/get_m2m_token.sh
      env:
        PROD_M2M_SECRET_ARN: "${{ env.PROD_M2M_SECRET_ARN }}"  # Using environment variable for secret
        NIGHTLY_M2M_SECRET_ARN: "${{ env.NIGHTLY_M2M_SECRET_ARN }}"  # Using environment variable for secret
      shell: bash

    - name: Install dependencies
      run: .github/scripts/install_deps.sh
      shell: bash

    - name: Run Notebooks
      run: |
        IFS=',' read -ra notebooks <<< "${{ inputs.notebooks }}"
        for notebook in "${notebooks[@]}"; do
          echo "Running notebook: $notebook"
          python -m nbconvert --to notebook --execute "$notebook" --output "$notebook"
        done
      env:
        JUPYTER_PLATFORM_DIRS: "1"
      shell: bash